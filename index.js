require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const TOKEN = process.env.TOKEN;
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_KEY = process.env.SUPABASE_KEY;

if (!TOKEN || !SUPABASE_URL || !SUPABASE_KEY) {
  console.error('‚ùå –ù–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN, SUPABASE_URL –∏–ª–∏ SUPABASE_KEY!');
  process.exit(1);
}


// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
const supabase = createClient(SUPABASE_URL, SUPABASE_KEY);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(TOKEN, { polling: true });

const ADMINS = [5234610042];
let acceptingRequests = true;
const userData = {};
const pendingRejections = {};

// ====== Utils ======
const normalizeCheck = (s = '') => s.toString().trim().toUpperCase();

function validateCheckNumber(checkNumber) {
  // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ 3 —Å–∏–º–≤–æ–ª–∞, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è 50
  if (!checkNumber || checkNumber.length < 3 || checkNumber.length > 50) {
    return false;
  }

  // –†–∞–∑—Ä–µ—à–∞–µ–º –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
  const regex = /^[a-zA-Z0-9\-_#]+$/;
  return regex.test(checkNumber);
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
async function testSupabaseConnection() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...');
    console.log('Supabase URL:', SUPABASE_URL);
    console.log('Supabase Key length:', SUPABASE_KEY ? SUPABASE_KEY.length : 'NULL');

    const { data, error } = await supabase
      .from('checks')
      .select('count')
      .limit(1);

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase:');
      console.error('–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', JSON.stringify(error, null, 2));
      console.error('–ö–æ–¥ –æ—à–∏–±–∫–∏:', error.code);
      console.error('–°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
      console.error('–î–µ—Ç–∞–ª–∏:', error.details);
      return false;
    }

    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ');
    return true;
  } catch (error) {
    console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏:');
    console.error('Stack:', error.stack);
    return false;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —á–µ–∫–∞
async function checkExists(checkNumber) {
  try {
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —á–µ–∫–∞: ${checkNumber}`);

    const threeMonthsAgo = new Date();
    threeMonthsAgo.setMonth(threeMonthsAgo.getMonth() - 3);

    const { data, error } = await supabase
      .from('checks')
      .select('id, check_number, created_at')
      .eq('check_number', checkNumber)
      .gte('created_at', threeMonthsAgo.toISOString());

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–∫–∞:', JSON.stringify(error, null, 2));
      return false;
    }

    const exists = data && data.length > 0;
    console.log(`–ß–µ–∫ ${checkNumber} ${exists ? '—Å—É—â–µ—Å—Ç–≤—É–µ—Ç' : '–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}`);
    return exists;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–µ–∫–∞:', error);
    return false;
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ–∫–∞
async function saveCheck(checkNumber) {
  try {
    console.log(`üíæ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ–∫–∞: ${checkNumber}`);
    console.log('Supabase URL:', SUPABASE_URL);
    console.log('Supabase Key length:', SUPABASE_KEY ? SUPABASE_KEY.length : 'NULL');

    const checkData = {
      check_number: checkNumber,
      created_at: new Date().toISOString()
    };

    console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', checkData);

    const { data, error } = await supabase
      .from('checks')
      .insert([checkData])
      .select('id, check_number, created_at');

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ–∫–∞:');
      console.error('–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', JSON.stringify(error, null, 2));
      console.error('–ö–æ–¥ –æ—à–∏–±–∫–∏:', error.code);
      console.error('–°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
      console.error('–î–µ—Ç–∞–ª–∏:', error.details);
      console.error('–•–∏–Ω—Ç:', error.hint);

      return {
        ok: false,
        duplicate: error.code === '23505',
        error: error.message
      };
    }

    console.log('‚úÖ –ß–µ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω:', data);
    return { ok: true, data: data[0] };
  } catch (error) {
    console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:');
    console.error('Stack:', error.stack);
    console.error('Full error:', error);
    return { ok: false, error: error.message };
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
async function ensureConnection() {
  try {
    const { error } = await supabase.from('checks').select('count').limit(1);
    return !error;
  } catch {
    return false;
  }
}

// ====== Show menu ======
function showMenu(chatId) {
  bot.sendMessage(
    chatId,
    '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏:',
    {
      reply_markup: {
        keyboard: [['–ü—Ä–æ—Å—Ç–æ–π', '–ü–µ—Ä–µ–ø—Ä–æ–±–µ–≥', '–û—Ç–∫–∞–∑ –æ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏']],
        resize_keyboard: true,
        one_time_keyboard: false
      }
    }
  );
}

// ====== Handlers ======
bot.onText(/\/start/, (msg) => {
  delete userData[msg.chat.id];
  showMenu(msg.chat.id);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
bot.onText(/\/test_db/, async (msg) => {
  const chatId = msg.chat.id;

  try {
    bot.sendMessage(chatId, 'üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');

    const connectionTest = await testSupabaseConnection();
    if (!connectionTest) {
      bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase');
      return;
    }

    const testCheck = 'TEST_' + Date.now();
    const saveResult = await saveCheck(testCheck);

    if (saveResult.ok) {
      bot.sendMessage(chatId, `‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n–°–æ—Ö—Ä–∞–Ω—ë–Ω —á–µ–∫: ${testCheck}`);
    } else {
      bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${saveResult.error}`);
    }
  } catch (error) {
    bot.sendMessage(chatId, `‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —á–µ–∫–∞
bot.onText(/\/debug_check (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const checkNumber = match[1];

  bot.sendMessage(chatId, `üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ–∫: ${checkNumber}`);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
  const exists = await checkExists(checkNumber);
  bot.sendMessage(chatId, `–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è: ${exists ? '—Å—É—â–µ—Å—Ç–≤—É–µ—Ç' : '–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}`);

  // –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  const result = await saveCheck(checkNumber);
  bot.sendMessage(chatId, `–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${JSON.stringify(result, null, 2)}`);
});

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = (msg.text || '').trim();

  // –ï—Å–ª–∏ –∞–¥–º–∏–Ω –≤–≤–æ–¥–∏—Ç –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞
  if (pendingRejections[chatId]) {
    const { userId, checkNumber } = pendingRejections[chatId];
    bot.sendMessage(userId, `‚ùå –û—Ç–∫–∞–∑ –ø–æ —á–µ–∫—É ‚Ññ${checkNumber}. –ü—Ä–∏—á–∏–Ω–∞: ${text}`);
    bot.sendMessage(chatId, '–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.');
    delete pendingRejections[chatId];
    showMenu(userId);
    return;
  }

  // –ó–∞–ø—Ä–µ—Ç –ø–∏—Å–∞—Ç—å –¥–æ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞—è–≤–∫–∏
  if (!userData[chatId] && !['–ü—Ä–æ—Å—Ç–æ–π', '–ü–µ—Ä–µ–ø—Ä–æ–±–µ–≥', '–û—Ç–∫–∞–∑ –æ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏'].includes(text)) {
    bot.sendMessage(chatId, '‚õî –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏.', {
      reply_markup: {
        keyboard: [['–ü—Ä–æ—Å—Ç–æ–π', '–ü–µ—Ä–µ–ø—Ä–æ–±–µ–≥', '–û—Ç–∫–∞–∑ –æ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏']],
        resize_keyboard: true
      }
    });
    return;
  }

  // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª —Ç–∏–ø –∑–∞—è–≤–∫–∏
  if (['–ü—Ä–æ—Å—Ç–æ–π', '–ü–µ—Ä–µ–ø—Ä–æ–±–µ–≥', '–û—Ç–∫–∞–∑ –æ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏'].includes(text)) {
    userData[chatId] = { type: text, step: 1 };
    bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–µ–π—Å–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):');
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤
  if (userData[chatId]) {
    const step = userData[chatId].step;
    const type = userData[chatId].type;

    if (step === 1) {
      userData[chatId].date = text;
      userData[chatId].step = 2;
      bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–Ω–æ–≥–æ —á–µ–∫–∞ (–ü–æ–ª–Ω–æ—Å—Ç—å—é):');
      return;
    }

    if (step === 2) {
      const checkNumber = normalizeCheck(text);
      console.log(`üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ–∫–∞: ${checkNumber} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${chatId}`);

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —á–µ–∫–∞
      if (!validateCheckNumber(checkNumber)) {
        bot.sendMessage(chatId, '‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —á–µ–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª—ã -_#. –î–ª–∏–Ω–∞ –æ—Ç 3 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤.');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      const isConnected = await ensureConnection();
      if (!isConnected) {
        bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        return;
      }

      const exists = await checkExists(checkNumber);
      if (exists) {
        bot.sendMessage(chatId, '‚õî –¢–∞–∫–æ–π —á–µ–∫ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ! –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä:');
        return;
      }

      const saved = await saveCheck(checkNumber);
      if (!saved.ok) {
        if (saved.duplicate) {
          bot.sendMessage(chatId, '‚õî –¢–∞–∫–æ–π —á–µ–∫ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ! –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä:');
          return;
        }
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', saved.error);
        delete userData[chatId];
        return;
      }

      userData[chatId].checkNumber = checkNumber;

      if (type === '–ü—Ä–æ—Å—Ç–æ–π') {
        userData[chatId].step = 3;
        bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è –Ω–∞ –∞–¥—Ä–µ—Å (–ß–ß:–ú–ú):');
        return;
      }

      sendRequestToAdmin(chatId, msg.from);
      delete userData[chatId];
      return;
    }

    if (step === 3 && type === '–ü—Ä–æ—Å—Ç–æ–π') {
      userData[chatId].arrival = text;
      userData[chatId].step = 4;
      bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —É–±—ã—Ç–∏—è —Å –∞–¥—Ä–µ—Å–∞ (–ß–ß:–ú–ú):');
      return;
    }

    if (step === 4 && type === '–ü—Ä–æ—Å—Ç–æ–π') {
      userData[chatId].departure = text;
      sendRequestToAdmin(chatId, msg.from);
      delete userData[chatId];
      return;
    }
  }
});

function sendRequestToAdmin(userId, from) {
  const data = userData[userId];
  let messageText =
    `üöö –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n` +
    `–¢–∏–ø: ${data.type}\n` +
    `–î–∞—Ç–∞: ${data.date}\n` +
    `–¢–æ–≤–∞—Ä–Ω—ã–π —á–µ–∫: ${data.checkNumber}\n`;

  if (data.type === '–ü—Ä–æ—Å—Ç–æ–π') {
    messageText += `–ü—Ä–∏–±—ã—Ç–∏–µ: ${data.arrival}\n–£–±—ã—Ç–∏–µ: ${data.departure}\n`;
  }

  messageText += `–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${from.first_name} (${userId})`;

  ADMINS.forEach((adminId) => {
    bot.sendMessage(adminId, messageText, {
      reply_markup: {
        inline_keyboard: [[
          { text: '‚úÖ –ó–∞–∫—Ä—ã—Ç–æ', callback_data: `approve_${userId}_${data.checkNumber}` },
          { text: '‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ', callback_data: `reject_${userId}_${data.checkNumber}` },
        ]],
      },
    });
  });

  bot.sendMessage(userId, `–ó–∞—è–≤–∫–∞ –ø–æ —á–µ–∫—É ‚Ññ${data.checkNumber} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.`);
}

bot.on('callback_query', (query) => {
  const [action, userId, checkNumber] = query.data.split('_');
  const fromId = query.from.id;

  if (!ADMINS.includes(fromId)) {
    bot.answerCallbackQuery(query.id, { text: '‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω!', show_alert: true });
    return;
  }

  if (action === 'approve') {
    bot.sendMessage(userId, `‚úÖ –ß–µ–∫ ‚Ññ${checkNumber} –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è.`);
    bot.sendMessage(fromId, '‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–∞.');
    bot.answerCallbackQuery(query.id, { text: '–ì–æ—Ç–æ–≤–æ.' });
    showMenu(userId);
  } else if (action === 'reject') {
    pendingRejections[fromId] = { userId, checkNumber };
    bot.sendMessage(fromId, '‚úè –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞:');
    bot.answerCallbackQuery(query.id, { text: '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É.' });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
testSupabaseConnection().then(success => {
  if (!success) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Supabase');
    process.exit(1);
  }
  console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (long polling)...');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
bot.on('error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ Telegram Bot API:');
  console.error(error);
});

bot.on('polling_error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ polling:');
  console.error(error);
});