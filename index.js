const TelegramBot = require('node-telegram-bot-api');

const token = process.env.TOKEN;
const bot = new TelegramBot(token, { polling: true });

const ADMINS = [5202993972];

let acceptingRequests = true;
const userData = {};
const submittedChecks = new Set();
const pendingRejections = {};
const activeRequests = new Set(); // –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∞–∫—Ç–∏–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–æ–π

function sendMainMenu(chatId) {
    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏:', {
        reply_markup: {
            keyboard: [
                ['–ü—Ä–æ—Å—Ç–æ–π'],
                ['–ü–µ—Ä–µ–ø—Ä–æ–±–µ–≥'],
                ['–û—Ç–∫–∞–∑ –æ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏']
            ],
            resize_keyboard: true
        }
    });
}

// –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏—ë–º –∑–∞—è–≤–æ–∫
bot.onText(/\/open/, (msg) => {
    if (!ADMINS.includes(msg.from.id)) return;
    acceptingRequests = true;
    bot.sendMessage(msg.chat.id, '‚úÖ –ë–æ—Ç —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω!');
});

// –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–∏—ë–º –∑–∞—è–≤–æ–∫
bot.onText(/\/close/, (msg) => {
    if (!ADMINS.includes(msg.from.id)) return;
    acceptingRequests = false;
    bot.sendMessage(msg.chat.id, '‚õî –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –ø—Ä–∏—á–∏–Ω–∞–º.');
});

// –°—Ç–∞—Ä—Ç
bot.onText(/\/start/, (msg) => {
    sendMainMenu(msg.chat.id);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    // –ï—Å–ª–∏ –∞–¥–º–∏–Ω –ø–∏—à–µ—Ç –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞
    if (pendingRejections[chatId]) {
        const targetUser = pendingRejections[chatId];
        bot.sendMessage(targetUser, `‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ: ${text}`);
        bot.sendMessage(chatId, '–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—é.');
        delete pendingRejections[chatId];
        activeRequests.delete(parseInt(targetUser)); // —Å–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        return;
    }

    // –ó–∞–ø—Ä–µ—Ç –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è
    if (activeRequests.has(chatId) && !ADMINS.includes(msg.from.id)) {
        bot.sendMessage(chatId, '‚õî –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞—è–≤–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞.');
        return;
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    if (!userData[chatId] && !['–ü—Ä–æ—Å—Ç–æ–π', '–ü–µ—Ä–µ–ø—Ä–æ–±–µ–≥', '–û—Ç–∫–∞–∑ –æ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏'].includes(text)) {
        sendMainMenu(chatId);
        return;
    }

    if (!acceptingRequests && !ADMINS.includes(msg.from.id)) {
        bot.sendMessage(chatId, '‚õî –ü—Ä–∏—ë–º –∑–∞—è–≤–æ–∫ —Å–µ–π—á–∞—Å –∑–∞–∫—Ä—ã—Ç.');
        return;
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ç–∏–ø –∑–∞—è–≤–∫–∏
    if (['–ü—Ä–æ—Å—Ç–æ–π', '–ü–µ—Ä–µ–ø—Ä–æ–±–µ–≥', '–û—Ç–∫–∞–∑ –æ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏'].includes(text)) {
        userData[chatId] = { type: text, step: 1 };
        bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–∫—Ä—ã—Ç–∏—è —Ä–µ–π—Å–∞ (–í —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):');
        return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    if (userData[chatId]) {
        const step = userData[chatId].step;
        const type = userData[chatId].type;

        if (step === 1) {
            userData[chatId].date = text;
            userData[chatId].step++;
            bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–Ω–æ–≥–æ —á–µ–∫–∞ (–ü–æ–ª–Ω–æ—Å—Ç—å—é):');
        } else if (step === 2) {
            if (submittedChecks.has(text.toUpperCase())) {
                bot.sendMessage(chatId, '‚õî –¢–∞–∫–∞—è –∑–∞—è–≤–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
                delete userData[chatId];
                sendMainMenu(chatId);
                return;
            }
            userData[chatId].checkNumber = text.toUpperCase();
            submittedChecks.add(text.toUpperCase());

            if (type === '–ü—Ä–æ—Å—Ç–æ–π') {
                userData[chatId].step++;
                bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è –Ω–∞ –∞–¥—Ä–µ—Å (–í —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú):');
            } else {
                sendRequestToAdmin(chatId, msg.from);
                delete userData[chatId];
            }
        } else if (step === 3 && type === '–ü—Ä–æ—Å—Ç–æ–π') {
            userData[chatId].arrival = text;
            userData[chatId].step++;
            bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —É–±—ã—Ç–∏—è —Å –∞–¥—Ä–µ—Å–∞ (–í —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú):');
        } else if (step === 4 && type === '–ü—Ä–æ—Å—Ç–æ–π') {
            userData[chatId].departure = text;
            sendRequestToAdmin(chatId, msg.from);
            delete userData[chatId];
        }
    }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∞–º
function sendRequestToAdmin(userId, from) {
    const data = userData[userId];

    activeRequests.add(userId); // –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ —Ç–æ–ª—å–∫–æ —Ç–µ–ø–µ—Ä—å

    let messageText =
        `üöö –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n` +
        `–¢–∏–ø: ${data.type}\n` +
        `–î–∞—Ç–∞: ${data.date}\n` +
        `–ß–µ–∫: ${data.checkNumber}\n`;

    if (data.type === '–ü—Ä–æ—Å—Ç–æ–π') {
        messageText += `–ü—Ä–∏–±—ã—Ç–∏–µ: ${data.arrival}\n` +
                       `–£–±—ã—Ç–∏–µ: ${data.departure}\n`;
    }

    messageText += `–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${from.first_name} (${userId})`;

    ADMINS.forEach(adminId => {
        bot.sendMessage(adminId, messageText, {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '‚úÖ –ó–∞–∫—Ä—ã—Ç–æ', callback_data: `approve_${userId}` },
                        { text: '‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ', callback_data: `reject_${userId}` }
                    ]
                ]
            }
        });
    });

    bot.sendMessage(userId, '–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∞–¥–º–∏–Ω–∞
bot.on('callback_query', (query) => {
    const data = query.data;
    const fromId = query.from.id;

    if (!ADMINS.includes(fromId)) {
        bot.answerCallbackQuery(query.id, { text: '‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å!', show_alert: true });
        return;
    }

    const [action, userId] = data.split('_');

    if (action === 'approve') {
        bot.sendMessage(userId, '‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è.');
        bot.sendMessage(fromId, '‚úÖ –ó–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞');
        bot.answerCallbackQuery(query.id, { text: '–ó–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.' });
        activeRequests.delete(parseInt(userId)); // —Å–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    } else if (action === 'reject') {
        pendingRejections[fromId] = userId;
        bot.sendMessage(fromId, '‚úè –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞:');
        bot.answerCallbackQuery(query.id, { text: '–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞.' });
    }
});
