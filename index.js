// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–Ω–∏-–≤–µ–±-—Å–µ—Ä–≤–µ—Ä, —á—Ç–æ–±—ã Koyeb –≤–∏–¥–µ–ª, —á—Ç–æ –±–æ—Ç –∂–∏–≤
const express = require('express');
const app = express();
const PORT = process.env.PORT || 8000;

app.get('/', (req, res) => {
  res.send('Bot is running!');
});

app.listen(PORT, () => {
  console.log(`Web server running on port ${PORT}`);
});

// Telegram bot
const TelegramBot = require('node-telegram-bot-api');

// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (–ù–ï —Ö—Ä–∞–Ω–∏–º –≤ –∫–æ–¥–µ!)
const token = process.env.BOT_TOKEN;

if (!token) {
  console.error("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Koyeb.");
  process.exit(1);
}

const bot = new TelegramBot(token, { polling: true });

const ADMINS = [5202993972];
let acceptingRequests = true;
const userData = {};
const submittedChecks = new Set();
const pendingRejections = {};
const activeRequests = {};

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function sendMainMenu(chatId) {
    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏:', {
        reply_markup: {
            keyboard: [
                ['–ü—Ä–æ—Å—Ç–æ–π'],
                ['–ü–µ—Ä–µ–ø—Ä–æ–±–µ–≥'],
                ['–û—Ç–∫–∞–∑ –æ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏']
            ],
            resize_keyboard: true
        }
    });
}

// –û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫–∏
bot.onText(/\/open/, (msg) => {
    if (!ADMINS.includes(msg.from.id)) return;
    acceptingRequests = true;
    bot.sendMessage(msg.chat.id, '‚úÖ –ë–æ—Ç —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω!');
});

// –ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫–∏
bot.onText(/\/close/, (msg) => {
    if (!ADMINS.includes(msg.from.id)) return;
    acceptingRequests = false;
    bot.sendMessage(msg.chat.id, '‚õî –ü—Ä–∏—ë–º –∑–∞—è–≤–æ–∫ –∑–∞–∫—Ä—ã—Ç.');
});

// –°—Ç–∞—Ä—Ç
bot.onText(/\/start/, (msg) => {
    sendMainMenu(msg.chat.id);
});

// –õ–æ–≥–∏–∫–∞ –±–æ—Ç–∞
bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    // –ï—Å–ª–∏ –∞–¥–º–∏–Ω –ø–∏—à–µ—Ç –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞
    if (pendingRejections[chatId]) {
        const targetUser = pendingRejections[chatId];
        bot.sendMessage(targetUser, `‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ: ${text}`);
        bot.sendMessage(chatId, '–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.');
        delete pendingRejections[chatId];
        return;
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞—è–≤–∫—É
    if (activeRequests[chatId]) {
        bot.sendMessage(chatId, '‚õî –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ—ë –æ–±—Ä–∞–±–æ—Ç–∫–∏.');
        return;
    }

    // –ï—Å–ª–∏ –±–æ—Ç –∑–∞–∫—Ä—ã—Ç
    if (!acceptingRequests && !ADMINS.includes(msg.from.id)) {
        bot.sendMessage(chatId, '‚õî –ü—Ä–∏—ë–º –∑–∞—è–≤–æ–∫ —Å–µ–π—á–∞—Å –∑–∞–∫—Ä—ã—Ç.');
        return;
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç —Ç–∏–ø
    if (['–ü—Ä–æ—Å—Ç–æ–π', '–ü–µ—Ä–µ–ø—Ä–æ–±–µ–≥', '–û—Ç–∫–∞–∑ –æ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏'].includes(text)) {
        userData[chatId] = { type: text, step: 1 };
        bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–∫—Ä—ã—Ç–∏—è —Ä–µ–π—Å–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):');
        return;
    }

    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
    if (userData[chatId]) {
        const step = userData[chatId].step;
        const type = userData[chatId].type;

        if (step === 1) {
            userData[chatId].date = text;
            userData[chatId].step++;
            bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–Ω–æ–≥–æ —á–µ–∫–∞:');
        } else if (step === 2) {
            if (submittedChecks.has(text.toUpperCase())) {
                bot.sendMessage(chatId, '‚õî –¢–∞–∫–∞—è –∑–∞—è–≤–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
                delete userData[chatId];
                sendMainMenu(chatId);
                return;
            }
            userData[chatId].checkNumber = text.toUpperCase();
            submittedChecks.add(text.toUpperCase());

            if (type === '–ü—Ä–æ—Å—Ç–æ–π') {
                userData[chatId].step++;
                bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è (–ß–ß:–ú–ú):');
            } else {
                activeRequests[chatId] = true;
                sendRequestToAdmin(chatId, msg.from);
                delete userData[chatId];
            }
        } else if (step === 3 && type === '–ü—Ä–æ—Å—Ç–æ–π') {
            userData[chatId].arrival = text;
            userData[chatId].step++;
            bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —É–±—ã—Ç–∏—è (–ß–ß:–ú–ú):');
        } else if (step === 4 && type === '–ü—Ä–æ—Å—Ç–æ–π') {
            userData[chatId].departure = text;
            activeRequests[chatId] = true;
            sendRequestToAdmin(chatId, msg.from);
            delete userData[chatId];
        }
    }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
function sendRequestToAdmin(userId, from) {
    const data = userData[userId];
    let messageText =
        `üöö –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n` +
        `–¢–∏–ø: ${data.type}\n` +
        `–î–∞—Ç–∞: ${data.date}\n` +
        `–ß–µ–∫: ${data.checkNumber}\n`;

    if (data.type === '–ü—Ä–æ—Å—Ç–æ–π') {
        messageText += `–ü—Ä–∏–±—ã—Ç–∏–µ: ${data.arrival}\n` +
                       `–£–±—ã—Ç–∏–µ: ${data.departure}\n`;
    }

    messageText += `–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${from.first_name} (${userId})`;

    ADMINS.forEach(adminId => {
        bot.sendMessage(adminId, messageText, {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '‚úÖ –ó–∞–∫—Ä—ã—Ç–æ', callback_data: `approve_${userId}` },
                        { text: '‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ', callback_data: `reject_${userId}` }
                    ]
                ]
            }
        });
    });

    bot.sendMessage(userId, '–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–∞
bot.on('callback_query', (query) => {
    const [action, userId] = query.data.split('_');
    const fromId = query.from.id;

    if (!ADMINS.includes(fromId)) {
        bot.answerCallbackQuery(query.id, { text: '‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å!', show_alert: true });
        return;
    }

    if (action === 'approve') {
        bot.sendMessage(userId, '‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è.');
        bot.sendMessage(fromId, '–ó–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.');
        delete activeRequests[userId];
        bot.answerCallbackQuery(query.id, { text: '–ó–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.' });
    } else if (action === 'reject') {
        pendingRejections[fromId] = userId;
        bot.sendMessage(fromId, '‚úè –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞:');
        bot.answerCallbackQuery(query.id, { text: '–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞.' });
    }
});
